<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SabanWi_Master.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SabanWi_Master.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Tue Sep 10 16:34:49 2024
<BR><P>
<H3>Maximum Stack Usage =        924 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; OnMaster &rArr; Saban_Mode_RS485 &rArr; Rf_Send_Request_AESSHA &rArr; Creat_Packet_Request_AESSHA &rArr; Sha256Update &rArr; TransformFunction
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SysTick_Handler</a><BR>
 <LI><a href="#[134]">USBD_MemCopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[134]">USBD_MemCopy</a><BR>
 <LI><a href="#[2e]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ACMP_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[10]">BOD_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[24]">CAN0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[25]">CAN1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2e]">Default_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[12]">EINT0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[13]">EINT1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[14]">GPAB_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[15]">GPCDEF_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[37]">GPIO_SetMode</a> from gpio_1.o(.text.GPIO_SetMode) referenced from gpio_driver.o(.text.SB_Master_GPIO_Init)
 <LI><a href="#[37]">GPIO_SetMode</a> from gpio_1.o(.text.GPIO_SetMode) referenced from sx1278_hw.o(.text.SX1276InitIO)
 <LI><a href="#[38]">HID_ClassRequest</a> from hid_transfer.o(.text.HID_ClassRequest) referenced from usb_driver.o(.text.SB_Usb_Driver_Init)
 <LI><a href="#[c]">HardFault_Handler</a> from retarget.o(.text.HardFault_Handler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[36]">Hard_Fault_Handler</a> from retarget.o(.text.Hard_Fault_Handler) referenced from retarget.o(.text.HardFault_Handler)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2b]">I2S_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2a]">PDMA_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[28]">PS2_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[16]">PWMA_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[17]">PWMB_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2c]">PWRWU_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2f]">RTC_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[26]">SC012_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[34]">SIM_EEPROM_READ</a> from dataflash_driver.o(.text.SIM_EEPROM_READ) referenced from dataflash_stack.o(.text.DataFlash_Master_Init)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[21]">SPI3_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[39]">SX1276Write</a> from sx1278_hw.o(.text.SX1276Write) referenced from sx1278-fsk.o(.text.SX1276FskInit)
 <LI><a href="#[39]">SX1276Write</a> from sx1278_hw.o(.text.SX1276Write) referenced from sx1278-lora.o(.text.SX1276LoRaProcess)
 <LI><a href="#[f]">SysTick_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_nuc200series.o(.text.SystemInit) referenced from startup_nuc200series.o(.text)
 <LI><a href="#[18]">TMR0_IRQHandler</a> from timer_driver_irq.o(.text.TMR0_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[19]">TMR1_IRQHandler</a> from timer_driver_irq.o(.text.TMR1_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1a]">TMR2_IRQHandler</a> from timer_driver_irq.o(.text.TMR2_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1b]">TMR3_IRQHandler</a> from timer_driver_irq.o(.text.TMR3_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1c]">UART02_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1d]">UART1_IRQHandler</a> from uart_driver_irq.o(.text.UART1_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[27]">USBD_IRQHandler</a> from hid_transfer.o(.text.USBD_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[11]">WDT_IRQHandler</a> from wdt_driver_irq.o(.text.WDT_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[35]">__2printf</a> from printf8.o(i.__0printf$8) referenced from rf_transfer.o(.text.Decode_Packet_Receive_AESCRC)
 <LI><a href="#[35]">__2printf</a> from printf8.o(i.__0printf$8) referenced from retarget.o(.text.Hard_Fault_Handler)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc200series.o(.text)
 <LI><a href="#[6]">eMBFuncReadCoils</a> from mbfunccoils.o(.text.eMBFuncReadCoils) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[9]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(.text.eMBFuncReadDiscreteInputs) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[2]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(.text.eMBFuncReadHoldingRegister) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[1]">eMBFuncReadInputRegister</a> from mbfuncinput.o(.text.eMBFuncReadInputRegister) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[5]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(.text.eMBFuncReadWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[0]">eMBFuncReportSlaveID</a> from mbfuncother.o(.text.eMBFuncReportSlaveID) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[7]">eMBFuncWriteCoil</a> from mbfunccoils.o(.text.eMBFuncWriteCoil) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[4]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(.text.eMBFuncWriteHoldingRegister) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[8]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(.text.eMBFuncWriteMultipleCoils) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[3]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(.text.eMBFuncWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data.xFuncHandlers)
 <LI><a href="#[3d]">fputc</a> from retarget.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[30]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3c]">xMBRTUReceiveFSM</a> from mbrtu.o(.text.xMBRTUReceiveFSM) referenced from mb.o(.text.eMBInit)
 <LI><a href="#[3a]">xMBRTUTimerT35Expired</a> from mbrtu.o(.text.xMBRTUTimerT35Expired) referenced from mb.o(.text.eMBInit)
 <LI><a href="#[3b]">xMBRTUTransmitFSM</a> from mbrtu.o(.text.xMBRTUTransmitFSM) referenced from mb.o(.text.eMBInit)
 <LI><a href="#[33]">xtime</a> from aes.o(.text.xtime) referenced from aes.o(.text.Cipher)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(.text)
</UL>
<P><STRONG><a name="[163]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[56]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[164]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[165]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[166]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[167]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[168]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SC012_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetTxPacket
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetTxPacket
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRxPacket
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacket
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBSetSlaveID
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDevicesStatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackClientSettingInfo
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFFrequency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetBitrate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetFdev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetBitrate
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_dcmplt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetBitrate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetFdev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetBitrate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFFrequency
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetBitrate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetFdev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetBitrate
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFFrequency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_idivmod</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, idiv_div0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[16e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[16f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[170]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[46]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[15b]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[172]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[173]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>AES_CBC_decrypt_buffer</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, aes.o(.text.AES_CBC_decrypt_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; AddRoundKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
</UL>

<P><STRONG><a name="[5b]"></a>AES_CBC_encrypt_buffer</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, aes.o(.text.AES_CBC_encrypt_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CBC_encrypt_buffer &rArr; Cipher &rArr; AddRoundKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
</UL>

<P><STRONG><a name="[5d]"></a>AES_init_ctx_iv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aes.o(.text.AES_init_ctx_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AES_init_ctx_iv &rArr; KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
</UL>

<P><STRONG><a name="[153]"></a>All_Led_ON</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gpio_driver.o(.text.All_Led_ON))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>All_Led_Off</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gpio_driver.o(.text.All_Led_Off))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>CLK_DisablePLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>

<P><STRONG><a name="[d7]"></a>CLK_EnableCKO</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableCKO))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>

<P><STRONG><a name="[d3]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer3_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer2_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer0_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Usb_Driver_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_WDT_Driver_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SPI_Driver_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[5f]"></a>CLK_EnablePLL</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_EnablePLL &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[d8]"></a>CLK_EnableSysTick</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, clk.o(.text.CLK_EnableSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>

<P><STRONG><a name="[d5]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>

<P><STRONG><a name="[62]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[65]"></a>CLK_SetCoreClock</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>

<P><STRONG><a name="[66]"></a>CLK_SetHCLK</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>

<P><STRONG><a name="[d2]"></a>CLK_SetModuleClock</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer3_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer2_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer0_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Usb_Driver_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_WDT_Driver_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SPI_Driver_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[60]"></a>CLK_WaitClockReady</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>

<P><STRONG><a name="[14c]"></a>CRC16</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, mbcrc.o(.text.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[68]"></a>Creat_Packet_Request_AESCRC</STRONG> (Thumb, 160 bytes, Stack size 280 bytes, rf_transfer.o(.text.Creat_Packet_Request_AESCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Creat_Packet_Request_AESCRC &rArr; AES_CBC_encrypt_buffer &rArr; Cipher &rArr; AddRoundKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
</UL>

<P><STRONG><a name="[6d]"></a>Creat_Packet_Request_AESSHA</STRONG> (Thumb, 184 bytes, Stack size 424 bytes, rf_transfer.o(.text.Creat_Packet_Request_AESSHA))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = Creat_Packet_Request_AESSHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Finalise
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Initialise
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
</UL>

<P><STRONG><a name="[71]"></a>Creat_Packet_Request_CRC</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, rf_transfer.o(.text.Creat_Packet_Request_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Creat_Packet_Request_CRC &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
</UL>

<P><STRONG><a name="[72]"></a>Creat_Packet_Request_SHA</STRONG> (Thumb, 142 bytes, Stack size 192 bytes, rf_transfer.o(.text.Creat_Packet_Request_SHA))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Creat_Packet_Request_SHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Finalise
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Initialise
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
</UL>

<P><STRONG><a name="[73]"></a>DataFlash_Master_Init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dataflash_stack.o(.text.DataFlash_Master_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DataFlash_Master_Init &rArr; SetDataFlashBase &rArr; FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadDataFlashBaseAddr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>Decode_Packet_Receive_AESCRC</STRONG> (Thumb, 256 bytes, Stack size 312 bytes, rf_transfer.o(.text.Decode_Packet_Receive_AESCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Decode_Packet_Receive_AESCRC &rArr; AES_CBC_decrypt_buffer &rArr; InvCipher &rArr; AddRoundKey
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[79]"></a>Decode_Packet_Receive_AESSHA</STRONG> (Thumb, 252 bytes, Stack size 480 bytes, rf_transfer.o(.text.Decode_Packet_Receive_AESSHA))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = Decode_Packet_Receive_AESSHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Finalise
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Initialise
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[7b]"></a>Decode_Packet_Receive_CRC</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, rf_transfer.o(.text.Decode_Packet_Receive_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Decode_Packet_Receive_CRC &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[7c]"></a>Decode_Packet_Receive_SHA</STRONG> (Thumb, 168 bytes, Stack size 216 bytes, rf_transfer.o(.text.Decode_Packet_Receive_SHA))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = Decode_Packet_Receive_SHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Finalise
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Initialise
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[7d]"></a>EP3_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hid_transfer.o(.text.EP3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = EP3_Handler &rArr; HID_GetOutReport &rArr; ProcessCommand &rArr; Update_DataFlashDevice_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlash_Master_Init
</UL>

<P><STRONG><a name="[7f]"></a>FMC_ReadConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fmc.o(.text.FMC_ReadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_ReadConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[76]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fmc.o(.text.FMC_ReadDataFlashBaseAddr))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlash_Master_Init
</UL>

<P><STRONG><a name="[81]"></a>FMC_WriteConfig</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fmc.o(.text.FMC_WriteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[37]"></a>GPIO_SetMode</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, gpio_1.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gpio_driver.o(.text.SB_Master_GPIO_Init)
<LI> sx1278_hw.o(.text.SX1276InitIO)
</UL>
<P><STRONG><a name="[38]"></a>HID_ClassRequest</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hid_transfer.o(.text.HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HID_ClassRequest &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlOut
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetSetupPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_driver.o(.text.SB_Usb_Driver_Init)
</UL>
<P><STRONG><a name="[7e]"></a>HID_GetOutReport</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_stack.o(.text.HID_GetOutReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = HID_GetOutReport &rArr; ProcessCommand &rArr; Update_DataFlashDevice_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_Handler
</UL>

<P><STRONG><a name="[e2]"></a>HID_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hid_transfer.o(.text.HID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Usb_Driver_Init
</UL>

<P><STRONG><a name="[139]"></a>HID_SetInReport</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_stack.o(.text.HID_SetInReport))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, retarget.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; Hard_Fault_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Hard_Fault_Handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, retarget.o(.text.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.text.HardFault_Handler)
</UL>
<P><STRONG><a name="[132]"></a>Led_Display</STRONG> (Thumb, 684 bytes, Stack size 0 bytes, gpio_control.o(.text.Led_Display))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>MBGetData16Bits</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, modbus_user.o(.text.MBGetData16Bits))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Test_PC
</UL>

<P><STRONG><a name="[a4]"></a>MBSetData16Bits</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, modbus_user.o(.text.MBSetData16Bits))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
</UL>

<P><STRONG><a name="[87]"></a>ModbusMaster_ModbusMasterTransaction</STRONG> (Thumb, 732 bytes, Stack size 288 bytes, modbus_master.o(.text.ModbusMaster_ModbusMasterTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ModbusMaster_ModbusMasterTransaction &rArr; Modbus_Master_Write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Available
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Millis
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Flush
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_update
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_writeSingleRegister
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_readHoldingRegisters
</UL>

<P><STRONG><a name="[8e]"></a>ModbusMaster_begin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_master.o(.text.ModbusMaster_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModbusMaster_begin &rArr; Modbus_Master_RB_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_RB_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Init
</UL>

<P><STRONG><a name="[a5]"></a>ModbusMaster_getResponseBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modbus_master.o(.text.ModbusMaster_getResponseBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Test_PC
</UL>

<P><STRONG><a name="[90]"></a>ModbusMaster_readHoldingRegisters</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modbus_master.o(.text.ModbusMaster_readHoldingRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ModbusMaster_readHoldingRegisters &rArr; ModbusMaster_ModbusMasterTransaction &rArr; Modbus_Master_Write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Test_PC
</UL>

<P><STRONG><a name="[91]"></a>ModbusMaster_writeSingleRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbus_master.o(.text.ModbusMaster_writeSingleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ModbusMaster_writeSingleRegister &rArr; ModbusMaster_ModbusMasterTransaction &rArr; Modbus_Master_Write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
</UL>

<P><STRONG><a name="[92]"></a>Modbus_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, operation.o(.text.Modbus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Modbus_Init &rArr; UseModbus &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_begin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>Modbus_Master_GetByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_GetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Modbus_Master_GetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Handler
</UL>

<P><STRONG><a name="[8b]"></a>Modbus_Master_Millis</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_Millis))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modbus_Master_Millis
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_GetTickMs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>

<P><STRONG><a name="[8f]"></a>Modbus_Master_RB_Initialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_RB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modbus_Master_RB_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_begin
</UL>

<P><STRONG><a name="[8d]"></a>Modbus_Master_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modbus_Master_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbIsEmpty
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbPop
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>

<P><STRONG><a name="[8c]"></a>Modbus_Master_Rece_Available</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_Rece_Available))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modbus_Master_Rece_Available
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbIsEmpty
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbClear
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>

<P><STRONG><a name="[89]"></a>Modbus_Master_Rece_Flush</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_Rece_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modbus_Master_Rece_Flush
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbClear
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>

<P><STRONG><a name="[9d]"></a>Modbus_Master_Rece_Handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_Rece_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Modbus_Master_Rece_Handler &rArr; Modbus_Master_GetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_GetByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbPush
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>Modbus_Master_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Modbus_Master_Write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>

<P><STRONG><a name="[a0]"></a>Modbus_Start</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, operation.o(.text.Modbus_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Modbus_Start &rArr; ModbusMaster_writeSingleRegister &rArr; ModbusMaster_ModbusMasterTransaction &rArr; Modbus_Master_Write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_writeSingleRegister
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_getResponseBuffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_readHoldingRegisters
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBSetData16Bits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBGetData16Bits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Modbus_Test_PC</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, operation.o(.text.Modbus_Test_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Modbus_Test_PC &rArr; ModbusMaster_readHoldingRegisters &rArr; ModbusMaster_ModbusMasterTransaction &rArr; Modbus_Master_Write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackTestModbus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_getResponseBuffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_readHoldingRegisters
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBGetData16Bits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>OnMaster</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, operation.o(.text.OnMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = OnMaster &rArr; Saban_Mode_RS485 &rArr; Rf_Send_Request_AESSHA &rArr; Creat_Packet_Request_AESSHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_RS485
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_IO_Standand
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_CRC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_ResetTickMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_GetTickMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_SetTickMs
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>ProcessCommand</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, usb_stack.o(.text.ProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ProcessCommand &rArr; Update_DataFlashDevice_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetChip
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetBitrate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlashDevice_From_PC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_RFConfig_From_PC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ModbusConfig_From_PC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ID_From_PC
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDevicesStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackClientSettingInfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>

<P><STRONG><a name="[c0]"></a>Radio_Start</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, operation.o(.text.Radio_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Radio_Start &rArr; SX1276Init &rArr; SX1276FskInit &rArr; SX1276FskSetDccBw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetBitrate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetVersion
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetVersion
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>Rf_Send_Request_AESCRC</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, rf_transfer.o(.text.Rf_Send_Request_AESCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Rf_Send_Request_AESCRC &rArr; Creat_Packet_Request_AESCRC &rArr; AES_CBC_encrypt_buffer &rArr; Cipher &rArr; AddRoundKey
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPayloadLength
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRxPacketTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_RS485
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_IO_Standand
</UL>

<P><STRONG><a name="[ce]"></a>Rf_Send_Request_AESSHA</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, rf_transfer.o(.text.Rf_Send_Request_AESSHA))
<BR><BR>[Stack]<UL><LI>Max Depth = 884<LI>Call Chain = Rf_Send_Request_AESSHA &rArr; Creat_Packet_Request_AESSHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPayloadLength
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRxPacketTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_RS485
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_IO_Standand
</UL>

<P><STRONG><a name="[cf]"></a>Rf_Send_Request_CRC</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rf_transfer.o(.text.Rf_Send_Request_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Rf_Send_Request_CRC &rArr; Creat_Packet_Request_CRC &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPayloadLength
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRxPacketTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetMode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_CRC
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_RS485
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_IO_Standand
</UL>

<P><STRONG><a name="[d0]"></a>Rf_Send_Request_SHA</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, rf_transfer.o(.text.Rf_Send_Request_SHA))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = Rf_Send_Request_SHA &rArr; Creat_Packet_Request_SHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_SHA
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPayloadLength
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRxPacketTimeout
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_RS485
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saban_Mode_IO_Standand
</UL>

<P><STRONG><a name="[152]"></a>SB_Master_GPIO_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gpio_driver.o(.text.SB_Master_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SB_Master_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>SB_SPI_Driver_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_driver.o(.text.SB_SPI_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SB_SPI_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>SB_SYS_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, systerm.o(.text.SB_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SB_SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableSysTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>SB_Timer0_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer_driver.o(.text.SB_Timer0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SB_Timer0_Init &rArr; TIMER_Open &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer_Driver_Init
</UL>

<P><STRONG><a name="[dc]"></a>SB_Timer1_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, timer_driver.o(.text.SB_Timer1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SB_Timer1_Init &rArr; TIMER_Open &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer_Driver_Init
</UL>

<P><STRONG><a name="[95]"></a>SB_Timer2_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, timer_driver.o(.text.SB_Timer2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SB_Timer2_Init &rArr; TIMER_Open &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Init
</UL>

<P><STRONG><a name="[dd]"></a>SB_Timer3_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer_driver.o(.text.SB_Timer3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SB_Timer3_Init &rArr; TIMER_Open &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer_Driver_Init
</UL>

<P><STRONG><a name="[de]"></a>SB_Timer_Driver_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_driver.o(.text.SB_Timer_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SB_Timer_Driver_Init &rArr; SB_Timer3_Init &rArr; TIMER_Open &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer3_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>SB_Uart_Driver_Init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, uart_driver.o(.text.SB_Uart_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[e0]"></a>SB_Usb_Driver_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_driver.o(.text.SB_Usb_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SB_Usb_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Open
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>SB_WDT_Driver_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wdt_driver.o(.text.SB_WDT_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SB_WDT_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>SIM_EEPROM_READ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dataflash_driver.o(.text.SIM_EEPROM_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlash_Master_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlashDevice_From_PC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_RFConfig_From_PC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ModbusConfig_From_PC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ID_From_PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataflash_stack.o(.text.DataFlash_Master_Init)
</UL>
<P><STRONG><a name="[e7]"></a>SIM_EEPROM_WRITE</STRONG> (Thumb, 212 bytes, Stack size 552 bytes, dataflash_driver.o(.text.SIM_EEPROM_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlashDevice_From_PC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_RFConfig_From_PC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ModbusConfig_From_PC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ID_From_PC
</UL>

<P><STRONG><a name="[128]"></a>SPI_Command</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx1278_hw.o(.text.SPI_Command))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>

<P><STRONG><a name="[11a]"></a>SPI_DisableAutoSS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text.SPI_DisableAutoSS))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIO
</UL>

<P><STRONG><a name="[119]"></a>SPI_EnableAutoSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(.text.SPI_EnableAutoSS))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIO
</UL>

<P><STRONG><a name="[e9]"></a>SPI_Open</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, spi.o(.text.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIO
</UL>

<P><STRONG><a name="[129]"></a>SPI_Readbyte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sx1278_hw.o(.text.SPI_Readbyte))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[c4]"></a>SX1276CheckLoRaConfigError</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1278-lora.o(.text.SX1276CheckLoRaConfigError))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276CheckLoRaConfigError &rArr; SX1276LoRaGetRFFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetPayloadLength
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetPacketCrcOn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetErrorCoding
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSpreadingFactor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSignalBandwidth
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFPower
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
</UL>

<P><STRONG><a name="[f1]"></a>SX1276FskGetBitrate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sx1278fsk_misc.o(.text.SX1276FskGetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276FskGetBitrate &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[f3]"></a>SX1276FskGetPacketCrcOn</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskGetPacketCrcOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276FskGetPacketCrcOn &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[f9]"></a>SX1276FskGetPacketPayloadSize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sx1278-fsk.o(.text.SX1276FskGetPacketPayloadSize))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[f5]"></a>SX1276FskGetPreambleSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskGetPreambleSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276FskGetPreambleSize &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[f6]"></a>SX1276FskGetRFFrequency</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1278fsk_misc.o(.text.SX1276FskGetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276FskGetRFFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskRxCalibrate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[f7]"></a>SX1276FskGetRFPower</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskGetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276FskGetRFPower &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[f8]"></a>SX1276FskGetRxPacket</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1278-fsk.o(.text.SX1276FskGetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276FskGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
</UL>

<P><STRONG><a name="[c7]"></a>SX1276FskGetTimeOnAir</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskGetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276FskGetTimeOnAir &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPacketPayloadSize
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[c6]"></a>SX1276FskGetVersion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx1278-fsk.o(.text.SX1276FskGetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276FskGetVersion &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
</UL>

<P><STRONG><a name="[fb]"></a>SX1276FskInit</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, sx1278-fsk.o(.text.SX1276FskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX1276FskInit &rArr; SX1276FskSetDccBw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetBitrate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskRxCalibrate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFPower
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPa20dBm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPAOutput
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPreambleSize
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPreambleSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPaRamp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRssiOffset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetFdev
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPacketCrcOn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDefaults
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[108]"></a>SX1276FskProcess</STRONG> (Thumb, 936 bytes, Stack size 24 bytes, sx1278-fsk.o(.text.SX1276FskProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276FskProcess &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ResetTickMs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetTickMs
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPacketPayloadSize
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRxGain
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[10c]"></a>SX1276FskReadAfc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx1278-fsk.o(.text.SX1276FskReadAfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276FskReadAfc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[10b]"></a>SX1276FskReadRssi</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1278-fsk.o(.text.SX1276FskReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276FskReadRssi &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[10d]"></a>SX1276FskReadRxGain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278-fsk.o(.text.SX1276FskReadRxGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276FskReadRxGain &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[107]"></a>SX1276FskRxCalibrate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sx1278fsk_misc.o(.text.SX1276FskRxCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276FskRxCalibrate &rArr; SX1276FskGetRFFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[bd]"></a>SX1276FskSetBitrate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1278fsk_misc.o(.text.SX1276FskSetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276FskSetBitrate &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[ff]"></a>SX1276FskSetDccBw</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, sx1278fsk_misc.o(.text.SX1276FskSetDccBw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276FskSetDccBw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[fc]"></a>SX1276FskSetDefaults</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1278-fsk.o(.text.SX1276FskSetDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276FskSetDefaults &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[fe]"></a>SX1276FskSetFdev</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskSetFdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276FskSetFdev &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[106]"></a>SX1276FskSetOpMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1278-fsk.o(.text.SX1276FskSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276FskSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[103]"></a>SX1276FskSetPAOutput</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskSetPAOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276FskSetPAOutput &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[104]"></a>SX1276FskSetPa20dBm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskSetPa20dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276FskSetPa20dBm &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[101]"></a>SX1276FskSetPaRamp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskSetPaRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276FskSetPaRamp &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[cc]"></a>SX1276FskSetPayloadLength</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278fsk_misc.o(.text.SX1276FskSetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276FskSetPayloadLength &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
</UL>

<P><STRONG><a name="[102]"></a>SX1276FskSetPreambleSize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskSetPreambleSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276FskSetPreambleSize &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[bc]"></a>SX1276FskSetRFFrequency</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1278fsk_misc.o(.text.SX1276FskSetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276FskSetRFFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskRxCalibrate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[105]"></a>SX1276FskSetRFPower</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sx1278fsk_misc.o(.text.SX1276FskSetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276FskSetRFPower &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[12d]"></a>SX1276FskSetRFState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1278-fsk.o(.text.SX1276FskSetRFState))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
</UL>

<P><STRONG><a name="[100]"></a>SX1276FskSetRssiOffset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1278fsk_misc.o(.text.SX1276FskSetRssiOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276FskSetRssiOffset &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
</UL>

<P><STRONG><a name="[112]"></a>SX1276FskSetTxPacket</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278-fsk.o(.text.SX1276FskSetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276FskSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
</UL>

<P><STRONG><a name="[c9]"></a>SX1276GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1278.o(.text.SX1276GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[aa]"></a>SX1276GetRxPacket</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278.o(.text.SX1276GetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276GetRxPacket &rArr; SX1276FskGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRxPacket
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[c5]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sx1278-lora.o(.text.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276GetTimeOnAir &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
</UL>

<P><STRONG><a name="[c2]"></a>SX1276Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sx1278.o(.text.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276Init &rArr; SX1276FskInit &rArr; SX1276FskSetDccBw &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIO
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
</UL>

<P><STRONG><a name="[115]"></a>SX1276InitIO</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sx1278_hw.o(.text.SX1276InitIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276InitIO &rArr; SPI_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableAutoSS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableAutoSS
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[ee]"></a>SX1276LoRaGetErrorCoding</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetErrorCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaGetErrorCoding &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[ef]"></a>SX1276LoRaGetPacketCrcOn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetPacketCrcOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaGetPacketCrcOn &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
</UL>

<P><STRONG><a name="[f0]"></a>SX1276LoRaGetPayloadLength</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaGetPayloadLength &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
</UL>

<P><STRONG><a name="[ea]"></a>SX1276LoRaGetRFFrequency</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276LoRaGetRFFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[eb]"></a>SX1276LoRaGetRFPower</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaGetRFPower &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[113]"></a>SX1276LoRaGetRxPacket</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1278-lora.o(.text.SX1276LoRaGetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276LoRaGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
</UL>

<P><STRONG><a name="[12f]"></a>SX1276LoRaGetRxPacketTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetRxPacketTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[ec]"></a>SX1276LoRaGetSignalBandwidth</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetSignalBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaGetSignalBandwidth &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[ed]"></a>SX1276LoRaGetSpreadingFactor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaGetSpreadingFactor &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276CheckLoRaConfigError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[c3]"></a>SX1276LoRaGetVersion</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx1278-lora.o(.text.SX1276LoRaGetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaGetVersion &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
</UL>

<P><STRONG><a name="[118]"></a>SX1276LoRaInit</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sx1278-lora.o(.text.SX1276LoRaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaInit &rArr; SX1276LoRaSetRFFrequency &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPreambleLength
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetDefaults
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[124]"></a>SX1276LoRaProcess</STRONG> (Thumb, 1044 bytes, Stack size 32 bytes, sx1278-lora.o(.text.SX1276LoRaProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276LoRaProcess &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ResetTickMs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetTickMs
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReadRxGain
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[125]"></a>SX1276LoRaReadRxGain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278-lora.o(.text.SX1276LoRaReadRxGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaReadRxGain &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[11b]"></a>SX1276LoRaSetDefaults</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1278-lora.o(.text.SX1276LoRaSetDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaSetDefaults &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[bb]"></a>SX1276LoRaSetErrorCoding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetErrorCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetErrorCoding &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[11d]"></a>SX1276LoRaSetImplicitHeaderOn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetImplicitHeaderOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetImplicitHeaderOn &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[120]"></a>SX1276LoRaSetLowDatarateOptimize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetLowDatarateOptimize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetLowDatarateOptimize &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[126]"></a>SX1276LoRaSetNbTrigPeaks</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetNbTrigPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
</UL>

<P><STRONG><a name="[123]"></a>SX1276LoRaSetOpMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1278-lora.o(.text.SX1276LoRaSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[121]"></a>SX1276LoRaSetPAOutput</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetPAOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetPAOutput &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[122]"></a>SX1276LoRaSetPa20dBm</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetPa20dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276LoRaSetPa20dBm &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[11c]"></a>SX1276LoRaSetPacketCrcOn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetPacketCrcOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetPacketCrcOn &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[ca]"></a>SX1276LoRaSetPayloadLength</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaSetPayloadLength &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[11f]"></a>SX1276LoRaSetPreambleLength</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetPreambleLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaSetPreambleLength &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[b7]"></a>SX1276LoRaSetRFFrequency</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetRFFrequency &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[b8]"></a>SX1276LoRaSetRFPower</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276LoRaSetRFPower &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[12c]"></a>SX1276LoRaSetRFState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1278-lora.o(.text.SX1276LoRaSetRFState))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
</UL>

<P><STRONG><a name="[cb]"></a>SX1276LoRaSetRxPacketTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetRxPacketTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
</UL>

<P><STRONG><a name="[b9]"></a>SX1276LoRaSetSignalBandwidth</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetSignalBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetSignalBandwidth &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[ba]"></a>SX1276LoRaSetSpreadingFactor</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[11e]"></a>SX1276LoRaSetSymbTimeout</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetSymbTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaSetSymbTimeout &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[127]"></a>SX1276LoRaSetTxPacket</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278-lora.o(.text.SX1276LoRaSetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276LoRaSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
</UL>

<P><STRONG><a name="[a9]"></a>SX1276Process</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278.o(.text.SX1276Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276Process &rArr; SX1276FskProcess &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[f4]"></a>SX1276Read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1278_hw.o(.text.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetVersion
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetVersion
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetPayloadLength
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetPacketCrcOn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetDefaults
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskRxCalibrate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFPower
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPa20dBm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPAOutput
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPaRamp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRssiOffset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetFdev
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPacketCrcOn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDefaults
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRxGain
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReadRxGain
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFPower
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetErrorCoding
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSpreadingFactor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSignalBandwidth
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFPower
</UL>

<P><STRONG><a name="[f2]"></a>SX1276ReadBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278_hw.o(.text.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Readbyte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPreambleLength
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPreambleSize
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPreambleSize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetBitrate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFFrequency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[10f]"></a>SX1276ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1278_hw.o(.text.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[116]"></a>SX1276Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1278.o(.text.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1276Reset &rArr; SX1276SetReset &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[117]"></a>SX1276SetLoRaOn</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sx1278.o(.text.SX1276SetLoRaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276SetLoRaOn &rArr; SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[c1]"></a>SX1276SetMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sx1278.o(.text.SX1276SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
</UL>

<P><STRONG><a name="[12a]"></a>SX1276SetReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278_hw.o(.text.SX1276SetReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SX1276SetReset &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[cd]"></a>SX1276SetTxPacket</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1278.o(.text.SX1276SetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276SetTxPacket &rArr; SX1276FskSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetTxPacket
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetTxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
</UL>

<P><STRONG><a name="[ab]"></a>SX1276StartCad</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1278.o(.text.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276StartCad
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFState
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
</UL>

<P><STRONG><a name="[ad]"></a>SX1276StartRx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278.o(.text.SX1276StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276StartRx
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFState
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFState
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
</UL>

<P><STRONG><a name="[39]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1278_hw.o(.text.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPayloadLength
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskRxCalibrate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFPower
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPa20dBm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPAOutput
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPreambleSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetPaRamp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRssiOffset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sx1278-fsk.o(.text.SX1276FskInit)
<LI> sx1278-lora.o(.text.SX1276LoRaProcess)
</UL>
<P><STRONG><a name="[fd]"></a>SX1276WriteBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278_hw.o(.text.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetBitrate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFFrequency
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPreambleLength
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetFdev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[109]"></a>SX1276WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1278_hw.o(.text.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[bf]"></a>SYS_ResetChip</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text.SYS_ResetChip))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[da]"></a>SYS_ResetModule</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys.o(.text.SYS_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer3_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer2_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer0_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[ac]"></a>Saban_Mode_IO_Standand</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rf_transfer.o(.text.Saban_Mode_IO_Standand))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = Saban_Mode_IO_Standand &rArr; Rf_Send_Request_AESSHA &rArr; Creat_Packet_Request_AESSHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[ae]"></a>Saban_Mode_RS485</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rf_transfer.o(.text.Saban_Mode_RS485))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = Saban_Mode_RS485 &rArr; Rf_Send_Request_AESSHA &rArr; Creat_Packet_Request_AESSHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESSHA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_SHA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_AESCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rf_Send_Request_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[b3]"></a>SendBack</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, usb_stack.o(.text.SendBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendBack &rArr; SX1276GetTimeOnAir &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRxPacketTimeout
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[b6]"></a>SendBackClientSettingInfo</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, usb_stack.o(.text.SendBackClientSettingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendBackClientSettingInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[af]"></a>SendBackDeviceSettingInfo</STRONG> (Thumb, 340 bytes, Stack size 152 bytes, usb_stack.o(.text.SendBackDeviceSettingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SendBackDeviceSettingInfo &rArr; SX1276FskGetTimeOnAir &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetBitrate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFPower
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRFFrequency
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacketTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetErrorCoding
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSpreadingFactor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSignalBandwidth
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFPower
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[b0]"></a>SendBackDevicesStatus</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, usb_stack.o(.text.SendBackDevicesStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendBackDevicesStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[a7]"></a>SendBackTestModbus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_stack.o(.text.SendBackTestModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBackTestModbus
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Test_PC
</UL>

<P><STRONG><a name="[151]"></a>SendChar_ToUART</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[75]"></a>SetDataFlashBase</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dataflash_driver.o(.text.SetDataFlashBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetDataFlashBase &rArr; FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlash_Master_Init
</UL>

<P><STRONG><a name="[70]"></a>Sha256Finalise</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sha.o(.text.Sha256Finalise))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = Sha256Finalise &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransformFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_SHA
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
</UL>

<P><STRONG><a name="[6e]"></a>Sha256Initialise</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, sha.o(.text.Sha256Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sha256Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_SHA
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
</UL>

<P><STRONG><a name="[6f]"></a>Sha256Update</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sha.o(.text.Sha256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransformFunction
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_SHA
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
</UL>

<P><STRONG><a name="[63]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, system_nuc200series.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc200series.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[db]"></a>TIMER_Open</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_Open &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer3_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer2_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer0_Init
</UL>

<P><STRONG><a name="[18]"></a>TMR0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_driver_irq.o(.text.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TMR1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer_driver_irq.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TMR2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer_driver_irq.o(.text.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TMR3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_driver_irq.o(.text.TMR3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Timer2_GetTickMs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_driver.o(.text.Timer2_GetTickMs))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Millis
</UL>

<P><STRONG><a name="[6a]"></a>Timer3_GetTickMs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_driver.o(.text.Timer3_GetTickMs))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_SHA
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_CRC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_CRC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[6c]"></a>Timer3_ResetTickMs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer_driver.o(.text.Timer3_ResetTickMs))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_SHA
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_CRC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_CRC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[69]"></a>Timer3_SetTickMs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer_driver.o(.text.Timer3_SetTickMs))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESSHA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_SHA
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_CRC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESSHA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_SHA
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_CRC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[10a]"></a>Timer_GetTickMs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_driver.o(.text.Timer_GetTickMs))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[10e]"></a>Timer_ResetTickMs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer_driver.o(.text.Timer_ResetTickMs))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[1d]"></a>UART1_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_driver_irq.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART1_IRQHandler &rArr; Modbus_Master_Rece_Handler &rArr; Modbus_Master_GetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>UART_EnableInt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text.UART_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Init
</UL>

<P><STRONG><a name="[97]"></a>UART_Read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(.text.UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_GetByte
</UL>

<P><STRONG><a name="[9f]"></a>UART_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(.text.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Write
</UL>

<P><STRONG><a name="[133]"></a>USBD_CtrlIn</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usbd.o(.text.USBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>USBD_CtrlOut</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd.o(.text.USBD_CtrlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlOut
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>USBD_GetDescriptor</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usbd.o(.text.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[82]"></a>USBD_GetSetupPacket</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd.o(.text.USBD_GetSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetSetupPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
</UL>

<P><STRONG><a name="[27]"></a>USBD_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, hid_transfer.o(.text.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = USBD_IRQHandler &rArr; EP3_Handler &rArr; HID_GetOutReport &rArr; ProcessCommand &rArr; Update_DataFlashDevice_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_Handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetInReport
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SwReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>USBD_Open</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd.o(.text.USBD_Open))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Usb_Driver_Init
</UL>

<P><STRONG><a name="[83]"></a>USBD_PrepareCtrlIn</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd.o(.text.USBD_PrepareCtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[84]"></a>USBD_PrepareCtrlOut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd.o(.text.USBD_PrepareCtrlOut))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
</UL>

<P><STRONG><a name="[138]"></a>USBD_ProcessSetupPacket</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd.o(.text.USBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_ProcessSetupPacket &rArr; USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>USBD_StandardRequest</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, usbd.o(.text.USBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[e3]"></a>USBD_Start</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usbd.o(.text.USBD_Start))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Usb_Driver_Init
</UL>

<P><STRONG><a name="[137]"></a>USBD_SwReset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd.o(.text.USBD_SwReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SwReset
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>Update_DataFlashDevice_From_PC</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, dataflash_stack.o(.text.Update_DataFlashDevice_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Update_DataFlashDevice_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[b1]"></a>Update_DataFlash_ID_From_PC</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dataflash_stack.o(.text.Update_DataFlash_ID_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Update_DataFlash_ID_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[b2]"></a>Update_DataFlash_ModbusConfig_From_PC</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, dataflash_stack.o(.text.Update_DataFlash_ModbusConfig_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Update_DataFlash_ModbusConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[b4]"></a>Update_DataFlash_RFConfig_From_PC</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, dataflash_stack.o(.text.Update_DataFlash_RFConfig_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Update_DataFlash_RFConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[93]"></a>UseModbus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modbus_user.o(.text.UseModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UseModbus &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBSetSlaveID
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Init
</UL>

<P><STRONG><a name="[11]"></a>WDT_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wdt_driver_irq.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_IRQHandler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>WDT_Open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wdt.o(.text.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_WDT_Driver_Init
</UL>

<P><STRONG><a name="[6b]"></a>crc16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, crc_modbus.o(.text.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_AESCRC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Packet_Request_CRC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_AESCRC
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode_Packet_Receive_CRC
</UL>

<P><STRONG><a name="[13d]"></a>eMBEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mb.o(.text.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBEnable &rArr; eMBRTUStart &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
</UL>

<P><STRONG><a name="[6]"></a>eMBFuncReadCoils</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mbfunccoils.o(.text.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[9]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mbfuncdisc.o(.text.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[2]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mbfuncholding.o(.text.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[1]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mbfuncinput.o(.text.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[5]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mbfuncholding.o(.text.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[0]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mbfuncother.o(.text.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[7]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mbfunccoils.o(.text.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[4]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mbfuncholding.o(.text.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[8]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mbfunccoils.o(.text.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[3]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbfuncholding.o(.text.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data.xFuncHandlers)
</UL>
<P><STRONG><a name="[13b]"></a>eMBInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mb.o(.text.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
</UL>

<P><STRONG><a name="[a2]"></a>eMBPoll</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, mb.o(.text.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = eMBPoll &rArr; eMBRTUReceive &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Test_PC
</UL>

<P><STRONG><a name="[144]"></a>eMBRTUInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbrtu.o(.text.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[147]"></a>eMBRTUReceive</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mbrtu.o(.text.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBRTUReceive &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[149]"></a>eMBRTUSend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbrtu.o(.text.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = eMBRTUSend &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[13e]"></a>eMBRTUStart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(.text.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRTUStart &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>

<P><STRONG><a name="[13f]"></a>eMBRegCoilsCB</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, modbus_user.o(.text.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[141]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, modbus_user.o(.text.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[142]"></a>eMBRegHoldingCB</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, modbus_user.o(.text.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[143]"></a>eMBRegInputCB</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, modbus_user.o(.text.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[13c]"></a>eMBSetSlaveID</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mbfuncother.o(.text.eMBSetSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBSetSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
</UL>

<P><STRONG><a name="[3d]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = main &rArr; OnMaster &rArr; Saban_Mode_RS485 &rArr; Rf_Send_Request_AESSHA &rArr; Creat_Packet_Request_AESSHA &rArr; Sha256Update &rArr; TransformFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Test_PC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlash_Master_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Led_Off
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Led_ON
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Master_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Usb_Driver_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Timer_Driver_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_WDT_Driver_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SPI_Driver_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[140]"></a>prveMBError2Exception</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mbutils.o(.text.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[9c]"></a>rbClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ringbuffer.o(.text.rbClear))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Available
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Flush
</UL>

<P><STRONG><a name="[99]"></a>rbInitialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ringbuffer.o(.text.rbInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_RB_Initialize
</UL>

<P><STRONG><a name="[9a]"></a>rbIsEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ringbuffer.o(.text.rbIsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Available
</UL>

<P><STRONG><a name="[9b]"></a>rbPop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ringbuffer.o(.text.rbPop))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Read
</UL>

<P><STRONG><a name="[9e]"></a>rbPush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ringbuffer.o(.text.rbPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rbPush
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Handler
</UL>

<P><STRONG><a name="[14d]"></a>vMBPortSerialEnable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, portserial.o(.text.vMBPortSerialEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortSerialEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[156]"></a>vMBPortTimersDisable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, porttimer.o(.text.vMBPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[14e]"></a>vMBPortTimersEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, porttimer.o(.text.vMBPortTimersEnable))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[146]"></a>xMBPortEventGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, portevent.o(.text.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[145]"></a>xMBPortEventInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(.text.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[148]"></a>xMBPortEventPost</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(.text.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[155]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portserial.o(.text.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[14a]"></a>xMBPortSerialInit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, portserial.o(.text.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[157]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portserial.o(.text.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[14b]"></a>xMBPortTimersInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, porttimer.o(.text.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBPortTimersInit &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[3c]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbrtu.o(.text.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUReceiveFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text.eMBInit)
</UL>
<P><STRONG><a name="[3a]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbrtu.o(.text.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUTimerT35Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text.eMBInit)
</UL>
<P><STRONG><a name="[3b]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbrtu.o(.text.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUTransmitFSM &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text.eMBInit)
</UL>
<P><STRONG><a name="[14f]"></a>xMBUtilGetBits</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbutils.o(.text.xMBUtilGetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[150]"></a>xMBUtilSetBits</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mbutils.o(.text.xMBUtilSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xMBUtilSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[158]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[176]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[35]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlash_Master_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlashDevice_From_PC
</UL>
<BR>[Address Reference Count : 2]<UL><LI> retarget.o(.text.Hard_Fault_Handler)
<LI> rf_transfer.o(.text.Decode_Packet_Receive_AESCRC)
</UL>
<P><STRONG><a name="[54]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[15a]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[15c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[177]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[178]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[179]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[160]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[110]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetDccBw
</UL>

<P><STRONG><a name="[77]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlash_Master_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_WDT_Driver_Init
</UL>

<P><STRONG><a name="[fa]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetTimeOnAir
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2e]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>FMC_Read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dataflash_driver.o(.text.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>

<P><STRONG><a name="[e8]"></a>FMC_Write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dataflash_driver.o(.text.FMC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
</UL>

<P><STRONG><a name="[85]"></a>USBD_SetStall</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hid_transfer.o(.text.USBD_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
</UL>

<P><STRONG><a name="[80]"></a>FMC_Read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fmc.o(.text.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
</UL>

<P><STRONG><a name="[64]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[134]"></a>USBD_MemCopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd.o(.text.USBD_MemCopy))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetSetupPacket
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[12e]"></a>USBD_MemCopy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_stack.o(.text.USBD_MemCopy))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackTestModbus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDevicesStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackClientSettingInfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[be]"></a>CLK_SysTickDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_stack.o(.text.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[12b]"></a>CLK_SysTickDelay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sx1278.o(.text.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[5e]"></a>KeyExpansion</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, aes.o(.text.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_init_ctx_iv
</UL>

<P><STRONG><a name="[5c]"></a>Cipher</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, aes.o(.text.Cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cipher &rArr; AddRoundKey
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
</UL>

<P><STRONG><a name="[67]"></a>AddRoundKey</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aes.o(.text.AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[33]"></a>xtime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aes.o(.text.xtime))
<BR>[Address Reference Count : 1]<UL><LI> aes.o(.text.Cipher)
</UL>
<P><STRONG><a name="[59]"></a>InvCipher</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, aes.o(.text.InvCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InvCipher &rArr; AddRoundKey
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[5a]"></a>XorWithIv</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text.XorWithIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XorWithIv
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_decrypt_buffer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CBC_encrypt_buffer
</UL>

<P><STRONG><a name="[130]"></a>TransformFunction</STRONG> (Thumb, 340 bytes, Stack size 340 bytes, sha.o(.text.TransformFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = TransformFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Finalise
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
</UL>

<P><STRONG><a name="[88]"></a>crc16_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modbus_master.o(.text.crc16_update))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusMaster_ModbusMasterTransaction
</UL>

<P><STRONG><a name="[159]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[15e]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
