<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SabanWi_Client.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SabanWi_Client.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Mon Sep 16 08:22:24 2024
<BR><P>
<H3>Maximum Stack Usage =        656 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBD_IRQHandler &rArr; EP3_Handler &rArr; HID_GetOutReport &rArr; ProcessCommand &rArr; Update_DataFlash_ModbusConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[7f]">USBD_MemCopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">USBD_MemCopy</a><BR>
 <LI><a href="#[26]">main</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">main</a><BR>
 <LI><a href="#[24]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ACMP_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1a]">CAN0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1b]">CAN1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[24]">Default_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from gpio_control.o(.text.GPAB_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from gpio_control.o(.text.GPCDEF_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[29]">GPIO_SetMode</a> from gpio.o(.text.GPIO_SetMode) referenced from gpio_driver.o(.text.GPIO_Client_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.text.HardFault_Handler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2a]">Hard_Fault_Handler</a> from retarget.o(.text.Hard_Fault_Handler) referenced from retarget.o(.text.HardFault_Handler)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[21]">I2S_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[20]">PDMA_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1e]">PS2_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[d]">PWMB_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[22]">PWRWU_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[25]">RTC_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1c]">SC012_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2d]">SIM_EEPROM_READ</a> from dataflash_driver.o(.text.SIM_EEPROM_READ) referenced from dataflash_stack.o(.text.Update_DataFlash_InputType_From_PC)
 <LI><a href="#[2c]">SIM_EEPROM_WRITE</a> from dataflash_driver.o(.text.SIM_EEPROM_WRITE) referenced from dataflash_stack.o(.text.Update_DataFlash_InputType_From_PC)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[17]">SPI3_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_nuc200series.o(.text.SystemInit) referenced from startup_nuc200series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from gpio_control.o(.text.TMR1_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from startup_nuc200series.o(.text) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from uart_driver_irq_1.o(.text.UART1_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[1d]">USBD_IRQHandler</a> from hid_transfer.o(.text.USBD_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from wdt_driver_irq_1.o(.text.WDT_IRQHandler) referenced from startup_nuc200series.o(RESET)
 <LI><a href="#[2b]">__2printf</a> from printf8.o(i.__0printf$8) referenced from retarget.o(.text.Hard_Fault_Handler)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc200series.o(.text)
 <LI><a href="#[31]">fputc</a> from retarget.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[26]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[30]">xMBRTUReceiveFSM</a> from mbrtu.o(.text.xMBRTUReceiveFSM) referenced from mb.o(.text.eMBInit)
 <LI><a href="#[2e]">xMBRTUTimerT35Expired</a> from mbrtu.o(.text.xMBRTUTimerT35Expired) referenced from mb.o(.text.eMBInit)
 <LI><a href="#[2f]">xMBRTUTransmitFSM</a> from mbrtu.o(.text.xMBRTUTransmitFSM) referenced from mb.o(.text.eMBInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[32]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[43]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SC012_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBSetSlaveID
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Client_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_idivmod</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, idiv_div0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[38]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[68]"></a>CLK_SetModuleClock</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[46]"></a>Check_Button_Status_1</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_1
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>Check_Button_Status_2</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_2
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPCDEF_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>Check_Button_Status_3</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_3
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPCDEF_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>Check_Button_Status_4</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_4
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>Check_Button_Status_5</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_5
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>Check_Button_Status_6</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_6
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>Check_Button_Status_7</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_7
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>Check_Button_Status_8</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_control.o(.text.Check_Button_Status_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Button_Status_8
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>EP3_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hid_transfer.o(.text.EP3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = EP3_Handler &rArr; HID_GetOutReport &rArr; ProcessCommand &rArr; Update_DataFlash_ModbusConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, gpio_control.o(.text.GPAB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPAB_IRQHandler &rArr; Check_Button_Status_8
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_8
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_7
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_6
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_5
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio_control.o(.text.GPCDEF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPCDEF_IRQHandler &rArr; Check_Button_Status_3
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_3
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Button_Status_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIO_Client_Init</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, gpio_driver.o(.text.GPIO_Client_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIO_Client_Init &rArr; GPIO_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[50]"></a>GPIO_EnableInt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio.o(.text.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Client_Init
</UL>

<P><STRONG><a name="[29]"></a>GPIO_SetMode</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_driver.o(.text.GPIO_Client_Init)
</UL>
<P><STRONG><a name="[45]"></a>HID_GetOutReport</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_stack.o(.text.HID_GetOutReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = HID_GetOutReport &rArr; ProcessCommand &rArr; Update_DataFlash_ModbusConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_Handler
</UL>

<P><STRONG><a name="[85]"></a>HID_SetInReport</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_stack.o(.text.HID_SetInReport))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, retarget.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; Hard_Fault_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Hard_Fault_Handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, retarget.o(.text.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.text.HardFault_Handler)
</UL>
<P><STRONG><a name="[53]"></a>Modbus_Master_GetByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_GetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Modbus_Master_GetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Handler
</UL>

<P><STRONG><a name="[55]"></a>Modbus_Master_Rece_Handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, trans_recieve_buff_control.o(.text.Modbus_Master_Rece_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Modbus_Master_Rece_Handler &rArr; Modbus_Master_GetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_GetByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbPush
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>ProcessCommand</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, usb_stack.o(.text.ProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ProcessCommand &rArr; Update_DataFlash_ModbusConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetCPU
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Client_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ModbusConfig_From_PC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_InputType_From_PC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ID_From_PC
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_RFConfig_From_PC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>

<P><STRONG><a name="[66]"></a>SB_Uart_Driver_Init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, uart_driver.o(.text.SB_Uart_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[2d]"></a>SIM_EEPROM_READ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dataflash_driver.o(.text.SIM_EEPROM_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ModbusConfig_From_PC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_InputType_From_PC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ID_From_PC
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_RFConfig_From_PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataflash_stack.o(.text.Update_DataFlash_InputType_From_PC)
</UL>
<P><STRONG><a name="[2c]"></a>SIM_EEPROM_WRITE</STRONG> (Thumb, 212 bytes, Stack size 552 bytes, dataflash_driver.o(.text.SIM_EEPROM_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ModbusConfig_From_PC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_InputType_From_PC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_ID_From_PC
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_DataFlash_RFConfig_From_PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataflash_stack.o(.text.Update_DataFlash_InputType_From_PC)
</UL>
<P><STRONG><a name="[79]"></a>SPI_Command</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx1278_hw.o(.text.SPI_Command))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>

<P><STRONG><a name="[7a]"></a>SPI_Readbyte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sx1278_hw.o(.text.SPI_Readbyte))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[6d]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sx1278-lora.o(.text.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276GetTimeOnAir &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
</UL>

<P><STRONG><a name="[6f]"></a>SX1276LoRaGetErrorCoding</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetErrorCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaGetErrorCoding &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[71]"></a>SX1276LoRaGetRFFrequency</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276LoRaGetRFFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[73]"></a>SX1276LoRaGetRFPower</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276LoRaGetRFPower &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[7d]"></a>SX1276LoRaGetRxPacketTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetRxPacketTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[74]"></a>SX1276LoRaGetSignalBandwidth</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetSignalBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaGetSignalBandwidth &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[75]"></a>SX1276LoRaGetSpreadingFactor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaGetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276LoRaGetSpreadingFactor &rArr; SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[5d]"></a>SX1276LoRaSetErrorCoding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetErrorCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetErrorCoding &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[77]"></a>SX1276LoRaSetNbTrigPeaks</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetNbTrigPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
</UL>

<P><STRONG><a name="[59]"></a>SX1276LoRaSetRFFrequency</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetRFFrequency &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[5a]"></a>SX1276LoRaSetRFPower</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276LoRaSetRFPower &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[7b]"></a>SX1276LoRaSetRxPacketTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetRxPacketTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
</UL>

<P><STRONG><a name="[5b]"></a>SX1276LoRaSetSignalBandwidth</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetSignalBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetSignalBandwidth &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[5c]"></a>SX1276LoRaSetSpreadingFactor</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1278lora_misc.o(.text.SX1276LoRaSetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[70]"></a>SX1276Read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1278_hw.o(.text.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetErrorCoding
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSpreadingFactor
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSignalBandwidth
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFPower
</UL>

<P><STRONG><a name="[72]"></a>SX1276ReadBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278_hw.o(.text.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Readbyte
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
</UL>

<P><STRONG><a name="[76]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1278_hw.o(.text.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
</UL>

<P><STRONG><a name="[78]"></a>SX1276WriteBuffer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278_hw.o(.text.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
</UL>

<P><STRONG><a name="[65]"></a>SYS_ResetCPU</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text.SYS_ResetCPU))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[69]"></a>SYS_ResetModule</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys.o(.text.SYS_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[60]"></a>SendBack</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, usb_stack.o(.text.SendBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendBack &rArr; SX1276GetTimeOnAir &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRxPacketTimeout
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[57]"></a>SendBackDeviceSettingInfo</STRONG> (Thumb, 160 bytes, Stack size 96 bytes, usb_stack.o(.text.SendBackDeviceSettingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SendBackDeviceSettingInfo &rArr; SX1276LoRaGetRFFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacketTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetErrorCoding
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSpreadingFactor
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetSignalBandwidth
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFPower
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRFFrequency
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[92]"></a>SendChar_ToUART</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc200series.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, gpio_control.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart_driver_irq_1.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART1_IRQHandler &rArr; Modbus_Master_Rece_Handler &rArr; Modbus_Master_GetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>UART_Close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text.UART_Close))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[54]"></a>UART_Read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(.text.UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_GetByte
</UL>

<P><STRONG><a name="[7e]"></a>USBD_CtrlIn</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usbd.o(.text.USBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>USBD_CtrlOut</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd.o(.text.USBD_CtrlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlOut
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>USBD_GetDescriptor</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usbd.o(.text.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[1d]"></a>USBD_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, hid_transfer.o(.text.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = USBD_IRQHandler &rArr; EP3_Handler &rArr; HID_GetOutReport &rArr; ProcessCommand &rArr; Update_DataFlash_ModbusConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_Handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetInReport
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SwReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USBD_PrepareCtrlIn</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd.o(.text.USBD_PrepareCtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[84]"></a>USBD_ProcessSetupPacket</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd.o(.text.USBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_ProcessSetupPacket &rArr; USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>USBD_StandardRequest</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, usbd.o(.text.USBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[83]"></a>USBD_SwReset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd.o(.text.USBD_SwReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SwReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>Update_DataFlash_ID_From_PC</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dataflash_stack.o(.text.Update_DataFlash_ID_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Update_DataFlash_ID_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[5f]"></a>Update_DataFlash_InputType_From_PC</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, dataflash_stack.o(.text.Update_DataFlash_InputType_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Update_DataFlash_InputType_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[61]"></a>Update_DataFlash_ModbusConfig_From_PC</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, dataflash_stack.o(.text.Update_DataFlash_ModbusConfig_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Update_DataFlash_ModbusConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[58]"></a>Update_DataFlash_RFConfig_From_PC</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, dataflash_stack.o(.text.Update_DataFlash_RFConfig_From_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Update_DataFlash_RFConfig_From_PC &rArr; SIM_EEPROM_WRITE &rArr; SIM_EEPROM_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[64]"></a>UseModbus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modbus_user.o(.text.UseModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UseModbus &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBSetSlaveID
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wdt_driver_irq_1.o(.text.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_IRQHandler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>eMBEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mb.o(.text.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBEnable &rArr; eMBRTUStart &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
</UL>

<P><STRONG><a name="[87]"></a>eMBInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mb.o(.text.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
</UL>

<P><STRONG><a name="[8b]"></a>eMBRTUInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbrtu.o(.text.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[8a]"></a>eMBRTUStart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(.text.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRTUStart &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>

<P><STRONG><a name="[88]"></a>eMBSetSlaveID</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mbfuncother.o(.text.eMBSetSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBSetSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UseModbus
</UL>

<P><STRONG><a name="[31]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[56]"></a>rbPush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ringbuffer.o(.text.rbPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rbPush
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Master_Rece_Handler
</UL>

<P><STRONG><a name="[8f]"></a>vMBPortSerialEnable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, portserial.o(.text.vMBPortSerialEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortSerialEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[95]"></a>vMBPortTimersDisable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, porttimer.o(.text.vMBPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[90]"></a>vMBPortTimersEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, porttimer.o(.text.vMBPortTimersEnable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[8c]"></a>xMBPortEventInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(.text.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[94]"></a>xMBPortEventPost</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(.text.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[93]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portserial.o(.text.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[8d]"></a>xMBPortSerialInit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, portserial.o(.text.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xMBPortSerialInit &rArr; SB_Uart_Driver_Init &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Uart_Driver_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[96]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portserial.o(.text.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[8e]"></a>xMBPortTimersInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, porttimer.o(.text.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBPortTimersInit &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[30]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbrtu.o(.text.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUReceiveFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text.eMBInit)
</UL>
<P><STRONG><a name="[2e]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbrtu.o(.text.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBRTUTimerT35Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text.eMBInit)
</UL>
<P><STRONG><a name="[2f]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mbrtu.o(.text.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUTransmitFSM &rArr; vMBPortSerialEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.text.eMBInit)
</UL>
<P><STRONG><a name="[97]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[aa]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[2b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.text.Hard_Fault_Handler)
</UL>
<P><STRONG><a name="[42]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ac]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[52]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[24]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc200series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc200series.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FMC_Read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dataflash_driver.o(.text.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_READ
</UL>

<P><STRONG><a name="[6c]"></a>FMC_Write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dataflash_driver.o(.text.FMC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_EEPROM_WRITE
</UL>

<P><STRONG><a name="[7f]"></a>USBD_MemCopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd.o(.text.USBD_MemCopy))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[7c]"></a>USBD_MemCopy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_stack.o(.text.USBD_MemCopy))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBack
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackDeviceSettingInfo
</UL>

<P><STRONG><a name="[63]"></a>CLK_SysTickDelay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_stack.o(.text.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[98]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[9a]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[99]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
